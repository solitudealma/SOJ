// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"fmt"

	"github.com/SpectatorNan/gorm-zero/gormc"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"gorm.io/gorm"
	"gorm.io/plugin/soft_delete"
)

var (
	cacheSojProblemIdPrefix        = "cache:soj:problem:id:"
	cacheSojProblemProblemIdPrefix = "cache:soj:problem:problemId:"
)

type (
	problemModel interface {
		Insert(ctx context.Context, tx *gorm.DB, data *Problem) error

		FindOne(ctx context.Context, id int64) (*Problem, error)
		FindOneByProblemId(ctx context.Context, problemId string) (*Problem, error)
		Update(ctx context.Context, tx *gorm.DB, data *Problem) error

		Delete(ctx context.Context, tx *gorm.DB, id int64) error
		Transaction(ctx context.Context, fn func(db *gorm.DB) error) error
	}

	defaultProblemModel struct {
		gormc.CachedConn
		table string
	}

	Problem struct {
		Id int64 `gorm:"column:id"`

		CreateTime int64 `gorm:"column:create_time;autoCreateTime"`

		UpdateTime int64 `gorm:"column:update_time;autoUpdateTime"`

		DeleteTime soft_delete.DeletedAt `gorm:"column:delete_time;not null"`

		ProblemId string `gorm:"column:problem_id"`
		// 问题的自定义ID 例如（HOJ-1000）
		Title string `gorm:"column:title"`
		// 题目标题
		Author string `gorm:"column:author"`
		// 作者
		Type int64 `gorm:"column:type"`
		// 0为ACM,1为OI
		TimeLimit int64 `gorm:"column:time_limit"`
		// 单位ms
		MemoryLimit int64 `gorm:"column:memory_limit"`
		// 单位kb
		StackLimit int64 `gorm:"column:stack_limit"`
		// 单位mb
		Description string `gorm:"column:description"`
		// 描述
		Input string `gorm:"column:input"`
		// 输入描述
		Output string `gorm:"column:output"`
		// 输出描述
		Examples string `gorm:"column:examples"`
		// 题面样例
		Source string `gorm:"column:source"`
		// 题目来源
		Difficulty int64 `gorm:"column:difficulty"`
		// 题目难度,0简单，1中等，2困难
		Hint string `gorm:"column:hint"`
		// 备注,提醒
	}
)

func (Problem) TableName() string {
	return "`problem`"
}

func newProblemModel(conn *gorm.DB, c cache.CacheConf) *defaultProblemModel {
	return &defaultProblemModel{
		CachedConn: gormc.NewConn(conn, c),
		table:      "`problem`",
	}
}

func (m *defaultProblemModel) Insert(ctx context.Context, tx *gorm.DB, data *Problem) error {

	err := m.ExecCtx(ctx, func(conn *gorm.DB) error {
		db := conn
		if tx != nil {
			db = tx
		}
		return db.Save(&data).Error
	}, m.getCacheKeys(data)...)
	return err
}

func (m *defaultProblemModel) FindOne(ctx context.Context, id int64) (*Problem, error) {
	sojProblemIdKey := fmt.Sprintf("%s%v", cacheSojProblemIdPrefix, id)
	var resp Problem
	err := m.QueryCtx(ctx, &resp, sojProblemIdKey, func(conn *gorm.DB, v interface{}) error {
		return conn.Model(&Problem{}).Where("`id` = ?", id).First(&resp).Error
	})
	switch err {
	case nil:
		return &resp, nil
	case gormc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultProblemModel) FindOneByProblemId(ctx context.Context, problemId string) (*Problem, error) {
	sojProblemProblemIdKey := fmt.Sprintf("%s%v", cacheSojProblemProblemIdPrefix, problemId)
	var resp Problem
	err := m.QueryRowIndexCtx(ctx, &resp, sojProblemProblemIdKey, m.formatPrimary, func(conn *gorm.DB, v interface{}) (interface{}, error) {
		if err := conn.Model(&Problem{}).Where("`problem_id` = ?", problemId).Take(&resp).Error; err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case gormc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultProblemModel) Update(ctx context.Context, tx *gorm.DB, data *Problem) error {
	old, err := m.FindOne(ctx, data.Id)
	if err != nil && err != ErrNotFound {
		return err
	}
	err = m.ExecCtx(ctx, func(conn *gorm.DB) error {
		db := conn
		if tx != nil {
			db = tx
		}
		return db.Save(data).Error
	}, m.getCacheKeys(old)...)
	return err
}

func (m *defaultProblemModel) getCacheKeys(data *Problem) []string {
	if data == nil {
		return []string{}
	}
	sojProblemIdKey := fmt.Sprintf("%s%v", cacheSojProblemIdPrefix, data.Id)
	sojProblemProblemIdKey := fmt.Sprintf("%s%v", cacheSojProblemProblemIdPrefix, data.ProblemId)
	cacheKeys := []string{
		sojProblemIdKey, sojProblemProblemIdKey,
	}
	cacheKeys = append(cacheKeys, m.customCacheKeys(data)...)
	return cacheKeys
}

func (m *defaultProblemModel) Delete(ctx context.Context, tx *gorm.DB, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		if err == ErrNotFound {
			return nil
		}
		return err
	}
	err = m.ExecCtx(ctx, func(conn *gorm.DB) error {
		db := conn
		if tx != nil {
			db = tx
		}
		return db.Delete(&Problem{}, id).Error
	}, m.getCacheKeys(data)...)
	return err
}

func (m *defaultProblemModel) Transaction(ctx context.Context, fn func(db *gorm.DB) error) error {
	return m.TransactCtx(ctx, fn)
}

func (m *defaultProblemModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheSojProblemIdPrefix, primary)
}

func (m *defaultProblemModel) queryPrimary(conn *gorm.DB, v, primary interface{}) error {
	return conn.Model(&Problem{}).Where("`id` = ?", primary).Take(v).Error
}
