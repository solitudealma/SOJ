syntax = "v1"

info(
	title: "题目实例"
	desc: "题目实例"
	author: "SolitudeAlma"
	email: "2241141629yt@gmail.com"
)

type Problem {
	ProblemId   string  `json:"problemId"`
	Title       string  `json:"title"`
	PassingRate float64 `json:"passingRate"`
	Difficulty  int64   `json:"difficulty"`
	IsAccepted  bool    `json:"isAccepted"`
}

type ProblemInfo {
	ProblemId	string	`json:"problemId"`
	Title 		string	`json:"title"`
	Description	string	`json:"description"`
	Input		string	`json:"input"`
	Output		string	`json:"output"`
	Examples	string	`json:"examples"`
	Difficulty	int64	`json:"difficulty"`
	TimeLimit	int64	`json:"timeLimit"`
	MemoryLimit int64	`json:"memoryLimit"`
	TotalNumberOfPasses int64 	`json:"totalNumberOfPasses"`
	TotalAttempts	int64	`json:"totalAttempts"`
	Source	string	`json:"source"`
	Tags	string	`json:"tags"`
}

type Result {
	ExpectedOutput	string	`json:"expectedOutput"`
	Memory	int64	`json:"memory"`
	Status 	string 	`json:"status"`
	Stderr 	string	`json:"stderr"`
	Time 	int64 	`json:"time"`
	UserInput	string	`json:"userInput"`
	UserOutput	string 	`json:"userOutput"`
}

type (
	GetProblemListInfoReq {
		CurrentPage int `form:"currentPage" validate:"required,gte=1"`
	}
	GetProblemListInfoResp {
		Current  int     `json:"current"`
		Total    int64     `json:"total"`
		Problems []Problem `json:"problems"`
	}
)

type (
	GetProblemInfoReq {
		ProblemId string `path:"problemId" validate:"required"`
	}
	GetProblemInfoResp {
		ProblemInfo ProblemInfo `json:"problemInfo"`
	}
)

type (
	DebugProblemReq {
		ProblemId 	string 	`json:"problemId" validate:"required"`
		Code 		string	`json:"code" validate:"required"`
		Language 	string 	`json:"language" validate:"required"`
		UserInput	string	`json:"userInput"`
	}
	DebugProblemResp {
		Result	Result `json:"result"`
	}
)