// Code generated by goctl. DO NOT EDIT.
package types

type Problem struct {
	ProblemId   string  `json:"problemId"`
	Title       string  `json:"title"`
	PassingRate float64 `json:"passingRate"`
	Difficulty  int64   `json:"difficulty"`
	IsAccepted  bool    `json:"isAccepted"`
}

type ProblemInfo struct {
	ProblemId           string `json:"problemId"`
	Title               string `json:"title"`
	Description         string `json:"description"`
	Input               string `json:"input"`
	Output              string `json:"output"`
	Examples            string `json:"examples"`
	Difficulty          int64  `json:"difficulty"`
	TimeLimit           int64  `json:"timeLimit"`
	MemoryLimit         int64  `json:"memoryLimit"`
	TotalNumberOfPasses int64  `json:"totalNumberOfPasses"`
	TotalAttempts       int64  `json:"totalAttempts"`
	Source              string `json:"source"`
	Tags                string `json:"tags"`
}

type Result struct {
	ExpectedOutput string `json:"expectedOutput"`
	Memory         int64  `json:"memory"`
	Status         string `json:"status"`
	Stderr         string `json:"stderr"`
	Time           int64  `json:"time"`
	UserInput      string `json:"userInput"`
	UserOutput     string `json:"userOutput"`
}

type GetProblemListInfoReq struct {
	CurrentPage int `form:"currentPage" validate:"required,gte=1"`
}

type GetProblemListInfoResp struct {
	Current  int       `json:"current"`
	Total    int64     `json:"total"`
	Problems []Problem `json:"problems"`
}

type GetProblemInfoReq struct {
	ProblemId string `path:"problemId" validate:"required"`
}

type GetProblemInfoResp struct {
	ProblemInfo ProblemInfo `json:"problemInfo"`
}

type DebugProblemReq struct {
	ProblemId string `json:"problemId" validate:"required"`
	Code      string `json:"code" validate:"required"`
	Language  string `json:"language" validate:"required"`
	UserInput string `json:"userInput"`
}

type DebugProblemResp struct {
	Result Result `json:"result"`
}
