// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"fmt"

	"github.com/SpectatorNan/gorm-zero/gormc"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"gorm.io/gorm"
	"gorm.io/plugin/soft_delete"
)

var (
	cacheSojSolutionIdPrefix         = "cache:soj:solution:id:"
	cacheSojSolutionSolutionIdPrefix = "cache:soj:solution:solutionId:"
)

type (
	solutionModel interface {
		Insert(ctx context.Context, tx *gorm.DB, data *Solution) error

		FindOne(ctx context.Context, id int64) (*Solution, error)
		FindOneBySolutionId(ctx context.Context, solutionId int64) (*Solution, error)
		Update(ctx context.Context, tx *gorm.DB, data *Solution) error

		Delete(ctx context.Context, tx *gorm.DB, id int64) error
		Transaction(ctx context.Context, fn func(db *gorm.DB) error) error
	}

	defaultSolutionModel struct {
		gormc.CachedConn
		table string
	}

	Solution struct {
		Id int64 `gorm:"column:id"`

		CreateTime int64 `gorm:"column:create_time;autoCreateTime"`

		UpdateTime int64 `gorm:"column:update_time;autoUpdateTime"`

		DeleteTime soft_delete.DeletedAt `gorm:"column:delete_time;not null"`

		SolutionId int64 `gorm:"column:solution_id"`
		// 题解Id
		ProblemId string `gorm:"column:problem_id"`
		// 题目Id
		ProblemSource string `gorm:"column:problem_source"`
		// 题解来源
		Title string `gorm:"column:title"`
		// 题解标题
		AuthorId int64 `gorm:"column:author_id"`

		AuthorName string `gorm:"column:author_name"`
		// 题解作者
		AuthorAvatar string `gorm:"column:author_avatar"`

		ProblemDifficulty int64 `gorm:"column:problem_difficulty"`
		// 题目难度,0简单，1中等，2困难
		ProblemLink string `gorm:"column:problem_link"`
		// 题目链接
		Read int64 `gorm:"column:read"`
		// 阅读量
		Content string `gorm:"column:content"`
		// 题解内容
	}
)

func (Solution) TableName() string {
	return "`solution`"
}

func newSolutionModel(conn *gorm.DB, c cache.CacheConf) *defaultSolutionModel {
	return &defaultSolutionModel{
		CachedConn: gormc.NewConn(conn, c),
		table:      "`solution`",
	}
}

func (m *defaultSolutionModel) Insert(ctx context.Context, tx *gorm.DB, data *Solution) error {

	err := m.ExecCtx(ctx, func(conn *gorm.DB) error {
		db := conn
		if tx != nil {
			db = tx
		}
		return db.Save(&data).Error
	}, m.getCacheKeys(data)...)
	return err
}

func (m *defaultSolutionModel) FindOne(ctx context.Context, id int64) (*Solution, error) {
	sojSolutionIdKey := fmt.Sprintf("%s%v", cacheSojSolutionIdPrefix, id)
	var resp Solution
	err := m.QueryCtx(ctx, &resp, sojSolutionIdKey, func(conn *gorm.DB, v interface{}) error {
		return conn.Model(&Solution{}).Where("`id` = ?", id).First(&resp).Error
	})
	switch err {
	case nil:
		return &resp, nil
	case gormc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSolutionModel) FindOneBySolutionId(ctx context.Context, solutionId int64) (*Solution, error) {
	sojSolutionSolutionIdKey := fmt.Sprintf("%s%v", cacheSojSolutionSolutionIdPrefix, solutionId)
	var resp Solution
	err := m.QueryRowIndexCtx(ctx, &resp, sojSolutionSolutionIdKey, m.formatPrimary, func(conn *gorm.DB, v interface{}) (interface{}, error) {
		if err := conn.Model(&Solution{}).Where("`solution_id` = ?", solutionId).Take(&resp).Error; err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case gormc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSolutionModel) Update(ctx context.Context, tx *gorm.DB, data *Solution) error {
	old, err := m.FindOne(ctx, data.Id)
	if err != nil && err != ErrNotFound {
		return err
	}
	err = m.ExecCtx(ctx, func(conn *gorm.DB) error {
		db := conn
		if tx != nil {
			db = tx
		}
		return db.Save(data).Error
	}, m.getCacheKeys(old)...)
	return err
}

func (m *defaultSolutionModel) getCacheKeys(data *Solution) []string {
	if data == nil {
		return []string{}
	}
	sojSolutionIdKey := fmt.Sprintf("%s%v", cacheSojSolutionIdPrefix, data.Id)
	sojSolutionSolutionIdKey := fmt.Sprintf("%s%v", cacheSojSolutionSolutionIdPrefix, data.SolutionId)
	cacheKeys := []string{
		sojSolutionIdKey, sojSolutionSolutionIdKey,
	}
	cacheKeys = append(cacheKeys, m.customCacheKeys(data)...)
	return cacheKeys
}

func (m *defaultSolutionModel) Delete(ctx context.Context, tx *gorm.DB, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		if err == ErrNotFound {
			return nil
		}
		return err
	}
	err = m.ExecCtx(ctx, func(conn *gorm.DB) error {
		db := conn
		if tx != nil {
			db = tx
		}
		return db.Delete(&Solution{}, id).Error
	}, m.getCacheKeys(data)...)
	return err
}

func (m *defaultSolutionModel) Transaction(ctx context.Context, fn func(db *gorm.DB) error) error {
	return m.TransactCtx(ctx, fn)
}

func (m *defaultSolutionModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheSojSolutionIdPrefix, primary)
}

func (m *defaultSolutionModel) queryPrimary(conn *gorm.DB, v, primary interface{}) error {
	return conn.Model(&Solution{}).Where("`id` = ?", primary).Take(v).Error
}
