// Code generated by goctl. DO NOT EDIT.
package types

type Comment struct {
	CommentId     int64  `json:"commentId"`
	Layer         int64  `json:"layer"`
	RootCommentId int64  `json:"rootCommentId"`
	ToCommentId   int64  `json:"toCommentId"`
	FromUserId    int64  `json:"fromUserId"`
	FromAvatar    string `json:"fromAvatar"`
	FromName      string `json:"fromName"`
	ToUserId      int64  `json:"toUserId"`
	ToName        string `json:"toName"`
	Content       string `json:"content"`
	CreateTime    int64  `json:"createTime"`
}

type CommentInfo struct {
	SolutionId    int64  `json:"solutionId" validate:"required"`
	Layer         int64  `json:"layer" validate:"required"`
	RootCommentId int64  `json:"rootCommentId"`
	ToCommentId   int64  `json:"toCommentId"`
	FromUserId    int64  `json:"fromUserId" validate:"required"`
	FromAvatar    string `json:"fromAvatar" validate:"required"`
	FromName      string `json:"fromName" validate:"required"`
	ToUserId      int64  `json:"toUserId"`
	ToName        string `json:"toName"`
	Content       string `json:"content" validate:"required"`
	CreateTime    int64  `json:"createTime" validate:"required"`
}

type GetCommentListInfoReq struct {
	SolutionId int64 `form:"solutionId" validate:"required"`
}

type GetCommentListInfoResp struct {
	Comments []Comment `json:"comments"`
	Total    int64     `json:"total"`
}

type CreateCommentReq struct {
	Comment CommentInfo `json:"comment" validate:"required"`
}

type CreateCommentResp struct {
	Comments []Comment `json:"comments"`
	Total    int64     `json:"total"`
}
