// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"fmt"

	"github.com/SpectatorNan/gorm-zero/gormc"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"gorm.io/gorm"
	"gorm.io/plugin/soft_delete"
)

var (
	cacheSojCommentIdPrefix = "cache:soj:comment:id:"
)

type (
	commentModel interface {
		Insert(ctx context.Context, tx *gorm.DB, data *Comment) error

		FindOne(ctx context.Context, id int64) (*Comment, error)
		Update(ctx context.Context, tx *gorm.DB, data *Comment) error

		Delete(ctx context.Context, tx *gorm.DB, id int64) error
		Transaction(ctx context.Context, fn func(db *gorm.DB) error) error
	}

	defaultCommentModel struct {
		gormc.CachedConn
		table string
	}

	Comment struct {
		Id int64 `gorm:"column:id"`

		CreateTime int64 `gorm:"column:create_time;autoCreateTime"`

		UpdateTime int64 `gorm:"column:update_time;autoUpdateTime"`

		DeleteTime soft_delete.DeletedAt `gorm:"column:delete_time;not null"`

		Sid int64 `gorm:"column:sid"`
		// 题解id
		RootCid int64 `gorm:"column:root_cid"`
		// 根评论id
		ToCid int64 `gorm:"column:to_cid"`
		// 被回复的评论id
		ToUid int64 `gorm:"column:to_uid"`

		ToName string `gorm:"column:to_name"`

		FromUid int64 `gorm:"column:from_uid"`

		FromName string `gorm:"column:from_name"`

		FromAvatar string `gorm:"column:from_avatar"`

		Content string `gorm:"column:content"`

		Layer int64 `gorm:"column:layer"`
		// 评论层级
	}
)

func (Comment) TableName() string {
	return "`comment`"
}

func newCommentModel(conn *gorm.DB, c cache.CacheConf) *defaultCommentModel {
	return &defaultCommentModel{
		CachedConn: gormc.NewConn(conn, c),
		table:      "`comment`",
	}
}

func (m *defaultCommentModel) Insert(ctx context.Context, tx *gorm.DB, data *Comment) error {

	err := m.ExecCtx(ctx, func(conn *gorm.DB) error {
		db := conn
		if tx != nil {
			db = tx
		}
		return db.Save(&data).Error
	}, m.getCacheKeys(data)...)
	return err
}

func (m *defaultCommentModel) FindOne(ctx context.Context, id int64) (*Comment, error) {
	sojCommentIdKey := fmt.Sprintf("%s%v", cacheSojCommentIdPrefix, id)
	var resp Comment
	err := m.QueryCtx(ctx, &resp, sojCommentIdKey, func(conn *gorm.DB, v interface{}) error {
		return conn.Model(&Comment{}).Where("`id` = ?", id).First(&resp).Error
	})
	switch err {
	case nil:
		return &resp, nil
	case gormc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultCommentModel) Update(ctx context.Context, tx *gorm.DB, data *Comment) error {
	old, err := m.FindOne(ctx, data.Id)
	if err != nil && err != ErrNotFound {
		return err
	}
	err = m.ExecCtx(ctx, func(conn *gorm.DB) error {
		db := conn
		if tx != nil {
			db = tx
		}
		return db.Save(data).Error
	}, m.getCacheKeys(old)...)
	return err
}

func (m *defaultCommentModel) getCacheKeys(data *Comment) []string {
	if data == nil {
		return []string{}
	}
	sojCommentIdKey := fmt.Sprintf("%s%v", cacheSojCommentIdPrefix, data.Id)
	cacheKeys := []string{
		sojCommentIdKey,
	}
	cacheKeys = append(cacheKeys, m.customCacheKeys(data)...)
	return cacheKeys
}

func (m *defaultCommentModel) Delete(ctx context.Context, tx *gorm.DB, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		if err == ErrNotFound {
			return nil
		}
		return err
	}
	err = m.ExecCtx(ctx, func(conn *gorm.DB) error {
		db := conn
		if tx != nil {
			db = tx
		}
		return db.Delete(&Comment{}, id).Error
	}, m.getCacheKeys(data)...)
	return err
}

func (m *defaultCommentModel) Transaction(ctx context.Context, fn func(db *gorm.DB) error) error {
	return m.TransactCtx(ctx, fn)
}

func (m *defaultCommentModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheSojCommentIdPrefix, primary)
}

func (m *defaultCommentModel) queryPrimary(conn *gorm.DB, v, primary interface{}) error {
	return conn.Model(&Comment{}).Where("`id` = ?", primary).Take(v).Error
}
