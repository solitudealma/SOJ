// Code generated by goctl. DO NOT EDIT.
// Source: judge.proto

package judge

import (
	"context"

	"github.com/solitudealma/SOJ/backend/app/judge/cmd/rpc/pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	CompileReq  = pb.CompileReq
	CompileResp = pb.CompileResp
	ExceReq     = pb.ExceReq
	ExceResp    = pb.ExceResp
	FileError   = pb.FileError
	Result      = pb.Result

	Judge interface {
		Compile(ctx context.Context, in *CompileReq, opts ...grpc.CallOption) (*CompileResp, error)
		Exce(ctx context.Context, in *ExceReq, opts ...grpc.CallOption) (*ExceResp, error)
	}

	defaultJudge struct {
		cli zrpc.Client
	}
)

func NewJudge(cli zrpc.Client) Judge {
	return &defaultJudge{
		cli: cli,
	}
}

func (m *defaultJudge) Compile(ctx context.Context, in *CompileReq, opts ...grpc.CallOption) (*CompileResp, error) {
	client := pb.NewJudgeClient(m.cli.Conn())
	return client.Compile(ctx, in, opts...)
}

func (m *defaultJudge) Exce(ctx context.Context, in *ExceReq, opts ...grpc.CallOption) (*ExceResp, error) {
	client := pb.NewJudgeClient(m.cli.Conn())
	return client.Exce(ctx, in, opts...)
}
